#+INCLUDE: ../../../+layouts/header.org
#+TITLE: Structures And Pointers

* Beginners tutorial                                      :TOC_4_gh:noexport:
- [[#basics-of-structures][Basics of structures]]
  - [[#definition][Definition]]
    - [[#but-what-do-we-mean-by-that][But what do we mean by that?]]
  - [[#syntax][Syntax]]
  - [[#properties-of-a-structure][Properties of a structure]]
  - [[#structure-variables][Structure variables]]
- [[#a-basic-students-record-program][A basic Students Record program]]
  - [[#using-standard-approach][using standard approach]]
  - [[#using-structural-approach][using structural approach]]
  - [[#using-structure-with-typedef][using structure with ’typedef’]]
    - [[#syntax-1][Syntax:]]
    - [[#example][Example:]]
- [[#thank-you][Thank you]]

* Basics of structures

** Definition
A structure simply is a collection of finite set of similar (heterogeneous)
collection of data elements under a single name.

*** But what do we mean by that?
Consider a scenario where we want to maintain a College record of a student.
Now, let’s try to visualize the various variables we are going to deal with:

- student-Name
- student-Email
- student-Branch
- student-Mobile
- student-Year
- student-Age
- student-Gender
- student-DOB
- student-RollNo
- student-Course
- student-Father-Name
- student-Mother–Name
- student-Subjects
- student-Marks
- student-Percentage
- student-Curr-Semester
- student-Aggregate-Marks

and the list goes on…

_*Phew!!! So much clutter in all these variables, very hard to keep track of
each one of them individually.*_
    
The best approach to follow in a programming environment is *“Divide
n’Conquer”*. Instead of dealing with all these variables at once, let’s try to
*divide them into groups*:
    
    |-----------+--------------------------|
    | _GROUP - A_ | *student-Personal-Details* |
    |-----------+--------------------------|
    |           | - name                   |
    |           | - age                    |
    |           | - gender                 |
    |           | - DOB                    |
    |           | - email                  |
    |           | - mobile                 |
    |           | - father-Name            |
    |           | - mother-name            |
    |-----------+--------------------------|

    |-----------+-------------------------|
    | _GROUP - B_ | *student-College-Details* |
    |-----------+-------------------------|
    |           | - rollNo                |
    |           | - year                  |
    |           | - branch                |
    |           | - course                |
    |           | - semester              |
    |-----------+-------------------------|

    |-----------+--------------------------|
    | _GROUP - C_ | *student-Academic-Details* |
    |-----------+--------------------------|
    |           | - subjects               |
    |           | - marks                  |
    |           | - percentage             |
    |           | - aggregate              |
    |-----------+--------------------------|

    Now it’s pretty easy to keep track of each of the variables with the help of their
    corresponding groups. Isn’t it? That’s exactly the idea behind the concepts of structure.

** Syntax
In C Language, The syntax of writing a block of structure is follows:
   
#+BEGIN_SRC C
struct <structure_name> {
  data_element#1;
  data_element#2;
  data_element#3;
  .
  .
  .
  data_element#n;
  };
#+END_SRC

Now, Let’s try to construct our very own structure in C Language for the
following sample:

|-----------+--------------------------|
| _GROUP - A_ | *student-Personal-Details* |
|-----------+--------------------------|
|           | - name                   |
|           | - age                    |
|           | - gender                 |
|           | - DOB                    |
|           | - email                  |
|           | - mobile                 |
|           | - father-Name            |
|           | - mother-name            |
|-----------+--------------------------|

becomes:

#+BEGIN_SRC C
struct student_Personal_Details {
  char *name;
  int age;
  char gender;
  int DOB;
  char *email;
  int mobile;
  char father_Name;
  char mother_Name;
};
#+END_SRC
     
** Properties of a structure
- Structure in itself is user-defined data-type.
- The ~<structure_name>~ is a pointer, pointing the first data-element of
  it’s collection.
- All the data-elements of a structure are stored in a contiguous memory fashion
  i.e in above example, if ~student_Personal_Details~ is a structure name then it would
  point/store the address of it’s first element: ~char *name;~. We’ll later
  explore how it works internally.
- A structure can hold as many data-elements as required and that too
  heterogeneous elements (different data-type).
- Structures are defined globally.
- All data-elements of a structure are private/only known to structure and
  it’s variables. They can’t be directly accessed outside the structure.
- The data-elements in a structure are called ~members~ of that structure.
- Structures and it’s members are accessed via their ~structure variables~ and the
  ~DOT (.)~ operator i.e.

** Structure variables
As we discussed earlier, ~structure~ itself is a user-defined data-type. So,
every data-type must’ve a variable-name so as to use it. In case of
~structures~, they are declared as follows:

#+BEGIN_SRC C
struct <structure_name> <structure_variable>; 
#+END_SRC

For example:

#+BEGIN_SRC C
struct student_Personal_Details std1;
#+END_SRC

So, ~std1~ is a variable name of ~struct student_Personal_Details~ data-type.

* A basic Students Record program
Now, Let’s try to develop a program where our goal is to get the following data
of a student from the user:

- Roll No
- Name
- Email
- Branch

** using standard approach

Writing ’Students Record’ program using only single main/normal function.

#+begin_src C
#include <stdio.h>
#include <stdlib.h>

int main (void) {
  int rollNo;
  char *name;
  char *email;
  char *branch;

  printf("Roll No - ");
  scanf(”%d“, &rollNo);

  printf("Name - ");
  fgets(&name, 25, stdin);

  printf("Branch - ");
  fgets(&branch, 10, stdin);

  printf("Email - ");
  fgets(&email, 50, stdin);

  return EXIT_SUCCESS;
}
#+end_src

** using structural approach

Same program, but instead using structure.

#+begin_src C
  #include <stdio.h>
  #include <stdlib.h>

  struct student_Personal_Details {
    int rollNo;
    char *name;
    char *email;
    char *branch;
  };

  struct student_Personal_Details std1;

  void populate_Structure(void) {
    printf("Roll No. - ");
    scanf("%d", &std1.rollNo);

    printf("Name - ");
    fgets(std1.name, 25, stdin);

    printf("Branch - ");
    fgets(std1.branch, 10, stdin);

    printf("Email - ");
    fgets(std1.email, 50, stdin);
  }

  int main(void) {
    populate_Structure();

    return EXIT_SUCCESS;
  }
#+end_src
 
** using structure with ’typedef’
The ~typedef~ /stands/ for ~type definition~. So using ~typedef~, we can give a
new alias/name to already existing data-type i.e. same as one person can have
two names.

*** Syntax:

#+BEGIN_SRC C
typedef <datatype> <alias/new_name>;
#+END_SRC

*** Example:
Instead of writing:

#+BEGIN_SRC C
struct student_Personal_Details std1;
struct student_Personal_Details std2;
struct student_Personal_Details std3;
#+END_SRC

We can take create our own data-type using ~typedef~ as follows:

#+BEGIN_SRC C
typedef struct student_Personal_Details stdRecord;

stdRecord std1;
stdRecord std2;
stdRecord std3;
#+END_SRC

So, finally the program becomes:

#+begin_src C
  #include <stdio.h>
  #include <stdlib.h>

  struct student_Personal_Details {
    int rollNo;
    char *name;
    char *email;
    char *branch;
  };

  typedef struct student_Personal_Details stdRecord;
  stdRecord std1;

  void populate_Structure(void) {
    printf("Roll No. - ");
    scanf("%d", &std1.rollNo);

    printf("Name - ");
    fgets(std1.name, 25, stdin);

    printf("Branch - ");
    fgets(std1.branch, 10, stdin);

    printf("Email - ");
    fgets(std1.email, 50, stdin);
  }

  int main(void) {
    populate_Structure();

    return EXIT_SUCCESS;
  }
#+end_src

* Thank you

#+begin_export html
  <a href="https://github.com/imahajanshubham/docs/blob/master/%2Bposts/lang/c-c%2B%2B/structures.org" class="fixedbutton btn btn-social-icon btn-github" onclick="_gaq.push(['_trackEvent', 'btn-social-icon', 'click', 'btn-github']);"><span class="fa fa-github"></span></a>

  <ul class="pager">
      <li class="next">
          <a href="https://imahajanshubham.github.io/docs/lang/java/hashmap.html" class="btn btn-neutral float-right" title="Hash Maps in Java" accesskey="n" rel="next">Next <span class="fa fa-arrow-circle-right"></span></a>
      </li>
      <li class="previous">
          <a href="https://imahajanshubham.github.io/docs/others/words_to_cherish.html" class="btn btn-neutral" title="The greatest enemy of learning is knowing" accesskey="n" rel="prev"><span class="fa fa-arrow-circle-left"></span> Previous</a>
      </li>
  </ul>
#+end_export

#+INCLUDE: ../../../+layouts/footer.org
