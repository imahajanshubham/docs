#+INCLUDE: ../../../+layouts/header.org
#+TITLE: Beware Of The Assumptions

* Table of contents                                       :TOC_4_gh:noexport:
- [[#greetings-everyone-][Greetings Everyone, ðŸ˜Š]]
- [[#what-took-so-long][What took so long?]]
  - [[#how-to-calculate-the-factorial-of--say-50][*How to calculate the factorial of â€¦ say ~50~?*]]
  - [[#factorial-of-50-is-a-65-digit-answer][Factorial of ~50~ is a ~65~ digit answer!]]
  - [[#do-we-even-have-a-datatype-in-c-to-store-such-a-huge-number][Do we even have a ~datatype~ in C to store such a huge number?]]
- [[#but-why][But why?]]
  - [[#false-assumption][False Assumption]]
  - [[#wrong-test-cases][Wrong Test Cases]]
- [[#how-did-i-overcame-it][How did I overcame it?]]
    - [[#what-if][What if:]]
    - [[#one-step-forward][One step forward!]]
    - [[#another-step-forward][Another step forward!]]
      - [[#multiply-the-intermediate-number][Multiply the intermediate number.]]
      - [[#update-the-final-carry][Update the final carry.]]
    - [[#almost-reached-the-destination][Almost reached the Destination!]]
- [[#key-learnings][Key Learnings]]
- [[#few-more-treats][Few more treats!]]
- [[#thank-you][Thank You!]]

* Greetings Everyone, ðŸ˜Š
Been almost two days,
Did a lot of challenges in the time period.
-----

* What took so long?
Ummâ€¦ Basically, a question:

** *How to calculate the factorial of â€¦ say ~50~?*
Sure, our basic logic of calculating the factorial using recursion would
work perfectly:

#+begin_src C
  unsigned int factorial(unsigned int number) {
    if (!number)
      return 1;

    return number * factorial(number - 1);
  }
#+end_src

- Itâ€™s even efficient in terms of speed too.
-----

** Factorial of ~50~ is a ~65~ digit answer!
You heard it right,
Factorial of ~50~ equals to
~30414093201713378043612608166064768844377641568960512000000000000~

Just way too longâ€¦
-----

** Do we even have a ~datatype~ in C to store such a huge number?
Nope!

I was just shocked, that even the *factorial program* being the most
elementary-level failed and I never realized of dealing with such huge numbers.
-----

* But why?
Because of my false assumption and wrong test cases.

** False Assumption
Implementing the Pen nâ€™ Paper logic via Code and believing - *thatâ€™s it!*

i.e. Only focusing on how to iterate the loop/function from ~2~ to ~n~.
-----

** Wrong Test Cases
The major reason behind such mistake:

- *0!*: The logic gives ~1~ as expected. 
- *5!*: Again ~120~ as expected.

OR in some case,

- *10!*: i.e. ~3628800~ which is under feasable range.

*But never went beyond thatâ€¦\\*
And that was the sole mistake.
-----

* How did I overcame it?
Thought processing.

Now after understanding the problem and realizing that I donâ€™t have any such datatype
to store such big values at my disposalâ€¦ - I started my planning on

*How do I manage/store the result?*

After facing a lot many previous challenges, I got the habit of storing the
occurrences of a digit/alphabet in the arrays as index value.

So,

At the back of my mind, I had the same thought of somehow using arrays to solve
the problem. Was just calculating the factorial of ~5~ by-hand on a piece of
paper, and I got this weird idea:

While multiplying ~5~ with ~24~,

|------------+---|
| 2 as carry |   |
|------------+---|
|          2 | 4 |
|            | 5 |
|------------+---|
|            | *0* |
|------------+---|

-----

*** What if:
Instead of treating ~24~ as a whole number, if IÂ store

~4~ in ~array[0]~ and,\\
~2~ in ~array[1]~


And then multiply ~5~ by ~array[0]~ and then add the carry to ~array[1]~ and again multiply
just like I was doing on the piece of paper?
-----

*** One step forward!
Initially, it felt a little tough to think such a logicâ€¦ But after a little-bit
of practice, I finally managed develop the following logic:

#+begin_src C
  int factorial(int number, int value[]) {
    value[0] = 1;
    int noOfDigits = 1;

    for (int localNumber = 2; localNumber <= number; localNumber++) {
      noOfDigits = multiply(localNumber, value, noOfDigits);
    }
  }
#+end_src

Using the ~for~ loop, I was iterating as usual, but was multiplying each
intermediate number with the previous value i.e. ~array~ (initially set to ~1~ as ~0!~ is ~1~) and updating the no of digits
thus obtained.

So far, only *30%* work was done.

Tricky part of actually multiplying the numbers was still left.
-----

*** Another step forward!
So to ease the problem,\\
I divided it into two sub-parts:

**** Multiply the intermediate number.
Taking the ~24 x 5~ example,\\
Letâ€™s say that at ~array[0]~, we would get ~4~. So, multiply ~5~ with ~4~.

*Answer is 20.*

Now, separate out the carry digit from the intermediate product ~number % 10~
logic. And store the remainder in ~array[0].

#+begin_src C
  for (int indx = 0; indx < noOfDigits; indx++) {
    int prod = value[indx] * localNumber + carry;

    value[indx] = prod % 10;
    carry = prod / 10;
  }
#+end_src

#+begin_note
We also need to take care of any previous carry digits.\\
In that case, we need to add the carry too.
#+end_note

-----

**** Update the final carry.
Add the carry i.e ~2~ to ~array[0 + 1]~.

If again a carry is generated (ex. 9 + 1 = 10), then repeat *previous step*.

#+begin_src C
  for (int indx = 0; indx < noOfDigits; indx++) {
    int prod = value[indx] * localNumber + carry;

    value[indx] = prod % 10;
    carry = prod / 10;
  }
#+end_src

-----

*** Almost reached the Destination!
Now only thing to be done was, print values of ~array~ from ~0~ to ~noOfDigits~ so as
to display the final factorial.

And we are good to go!!!
-----

* Key Learnings
- Always validate the assumptions, *at any cost*.
- Explore every other possibilities.
- Consider general-case scenarios rather than fixed ones.
- Always have the room to improvise/innovate.

I hope this was the experience worth sharing.ðŸ™‹ 
-----

* Few more treats!
Hereâ€™s the original source code and various others on *GitHub*:

-----
*#1* CodeChef - [[https://www.codechef.com/CBEN2018/problems/LEONARD][ *Magical Function* ]]\\
The goal was to recognize the pattern of a given function.
[[https://github.com/imahajanshubham/Miscellaneous-Programs/blob/master/c_lang/problem14/magicNumbers.c][view code]]

-----
*#2* CodeChef - [[https://www.codechef.com/KQM82018/problems/QM8B][ *Average Halfify(keteki)* ]]\\
The goal was to calculate the recursive average of pairs of *n* numbers.
[[https://github.com/imahajanshubham/Miscellaneous-Programs/blob/master/c_lang/problem19/halfifyaverage.c][view code]]

-----
*#3* CodeChef - [[https://www.codechef.com/problems/bitmask2][ Mminimizing the Dot Product ]]\\
the goal was to calculate the minimum dot product of given two vectors. we could
interchange the vector positions with each other if needed.
[[https://github.com/imahajanshubham/Miscellaneous-Programs/blob/master/c_lang/problem15/dotproduct.c][view code]]

-------------------------------------------------------------------------------
*#4* CodeChef - [[https://www.codechef.com/problems/CHEFSUM][ *Little Chef and Sums* ]]\\
The goal was calculate the total of *suffix-sum* and *prefix-sum* of given *n* values
in an array.
[[https://github.com/imahajanshubham/Miscellaneous-Programs/blob/master/c_lang/problem16/suffixprefixsum.c][view code]]
-------------------------------------------------------------------------------

* Thank You!

#+begin_export html
  <ul class="pager">
      <li class="previous">
          <a href="https://imahajanshubham.github.io/docs/lang/c-c++/only_source_code/average_halfify.html">
              <div class="tooltip">Previous
                  <span class="tooltiptext">Average Halfify (keteki)</span>
              </div>
          </a>
      </li>
      <li class="next">
          <a href="https://imahajanshubham.github.io/docs/home.html">
              <div class="tooltip">Next
                  <span class="tooltiptext">Home</span>
              </div>
          </a>
      </li>
  </ul>
#+end_export

-----

#+INCLUDE: ../../../+layouts/footer.org
