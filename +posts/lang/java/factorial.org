#+INCLUDE: ../../../+layouts/header.org
#+TITLE: Factorial of a Number

* Table of contents                                       :TOC_4_gh:noexport:
- [[#problem-statement][Problem Statement]]
- [[#few-examples][Few Examples]]
  - [[#example-1][Example #1]]
  - [[#example-2][Example #2]]
- [[#lets-begin][Let's Begin!]]
  - [[#what-did-we-observed][What did we observed?]]
  - [[#what-should-we-do-to-store-such-big-values][What should we do to store such big values?]]
  - [[#the-initial-value-of-a-factorial][The initial value of a factorial]]
  - [[#one-step-closer-towards-the-answer][One step closer towards the Answer]]
- [[#the-final-solution][The Final Solution]]
- [[#thank-you][Thank You!]]

* Problem Statement
Write a program that, given a number ~n~ from STDIN, prints out the factorial of ~n~ to STDOUT:

- If ~n~ is ~0~, ~n~ factorial is ~1~
- ~n!~ is not defined for negative numbers.

* Few Examples
** Example #1

|--------------------|
| 3! = 3 × 2 × 1 = 6 |
|--------------------|

So given the input ~3~, your program should output:

|---|
| 6 |
|---|

** Example #2

|---------------------------------------|
| 7! = 7 × 6 × 5 × 4 × 3 × 2 × 1 = 5040 |
|---------------------------------------|

So given the input ~7~, your program should output:

|------|
| 5040 |
|------|

* Let's Begin!
- Let's say we want to calculate the factorial of ~5~. This answer is ~120~.
- What if we want to calculate the factorial of ~10~? The answer would be ~3628800~.
- And what about.. say ~27~? A whooping ~10888869450418352160768000000~... !

** What did we observed?
- Factorial of a number grows very fast as we increase the number.

So, we need some mechanism to deal with such large numbers.

- Ordinary ~int~, ~long~ or ~double~ datatypes won't work.

Even though the logic of calculating the factorial is fairly simple, but storing
the result poses a hurdle.

** What should we do to store such big values?
Here comes ~BigInteger~ class in java to the rescue!

#+begin_note
BigInteger class is used for mathematical operation which involves very big
integer calculations that are outside the limit of all available primitive data
types.

There is no theoretical limit on the upper bound of the range because memory is
allocated dynamically but practically as memory is limited you can store a
number which has Integer.
#+end_note

Let's create a function ~calculateFactorial~ which will take an ~integer~ number
whose factorial we have to find and inside that function, let's create an object
for ~BigInteger~ class and name it as ~factorial~.

#+begin_src java
  private static void calculateFactorial(int numberWhoseFactToFind) {
      BigInteger factorial;
  }
#+end_src

#+begin_attention
Don't forget to *import* ~java.math.BigInteger~ class!
#+end_attention

** The initial value of a factorial
Now, let's recall the logic for calculating the factorial of a number ~n~:

~3!~ = *1* x ~2~ x ~3~\\
~5!~ = *1* ~2~ x ~3~ x ~4~ x ~5~

or in general,

~n!~ = *1* x ~2~ x ~3~ ... ~n~

What we observed is no matter what the number is, it's initial value is always
~1~.

So, the ~BigInteger~ gives us the option to do the same i.e. initialise the
factorial by ~1~.

#+begin_src java
  private static void calculateFactorial(int numberWhoseFactToFind) {
      BigInteger factorial = BigInteger.ONE;
  }
#+end_src

** One step closer towards the Answer
Because we have initialized the factorial to ~1~, we don't have to multiply number
by one in each Test Case.

So, We should simply start multiplying from ~2~ till the number itself is
encountered.

#+begin_src java
  private static void calculateFactorial(int numberWhoseFactToFind) {
      BigInteger factorial = BigInteger.ONE;

      for (int number = 2; number <= numberWhoseFactToFind; number++) {
          factorial = factorial.multiply(BigInteger.valueOf(number));
      }
  }
#+end_src

And we are good to go!

* The Final Solution
Connecting the dots i.e. creating a class ~factorial~ and a ~main~ function inside
it and the calling the ~calculateFactorial~ (passing the input from user) from
there and *importing* all the necessary classes that are required.

#+begin_src java
  import java.io.*;
  import java.math.BigInteger;
  import java.util.*;

  public class factorial {
      public static void main(String[] args) {
          Scanner scanner = new Scanner(System.in);
          calculateFactorial(scanner.nextInt());

          scanner.close();
      }

      private static void calculateFactorial(int numberWhoseFactToFind) {
          BigInteger factorial = BigInteger.ONE;

          for (int number = 2; number <= numberWhoseFactToFind; number++) {
              factorial = factorial.multiply(BigInteger.valueOf(number));
          }

          System.out.println(factorial);
      }
  }
#+end_src

Here's the screenshot for few test runs:

[[https://raw.githubusercontent.com/imahajanshubham/docs/master/%2Bassets/lang/java/factorial.png]]

* Thank You!

#+begin_export html
  <ul class="pager">
      <li class="previous">
          <a href="https://imahajanshubham.github.io/docs/lang/c-c++/acid_naming.html">
              <div class="tooltip">Previous
                  <span class="tooltiptext">Acid Naming Problem</span>
              </div>
          </a>
      </li>
      <li class="next">
          <a href="https://imahajanshubham.github.io/docs/lang/c-c++/occurrences_of_a_digit.html">
              <div class="tooltip">Next
                  <span class="tooltiptext">Occurrences of a Digit</span>
              </div>
          </a>
      </li>
  </ul>
#+end_export

-----

#+INCLUDE: ../../../+layouts/footer.org
