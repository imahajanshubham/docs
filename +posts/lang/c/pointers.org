#+TITLE: Fun with Pointers

#+ATTR_HTML: :width 100% class="center"
| Home | Featured Blogs | [[https://github.com/imahajanshubham][GitHub]] |

* Beginners tutorial                                      :TOC_4_gh:noexport:
- [[#basics-of-pointers][Basics of pointers]]
  - [[#definition][Definition]]
  - [[#syntax][Syntax]]
  - [[#whats-the-data-type-of-a-pointer][What’s the data-type of a pointer?]]
  - [[#why-do-we-specify-data-type-before-the-pointers-name-if-its-of-unsigned-long-int-type][*Why do we specify data-type before the pointer’s name if it’s of ~unsigned long int~ type?*]]
- [[#thank-you][Thank You!]]

* TODO Basics of pointers

** DONE Definition

A pointer is a variable which stores the address (memory location) of another variable.

** Syntax

   In C Language, The syntax of declaring a pointer is as follows:
   
#+begin_src C
<data-type> *ptr_name; 
#+end_src
     
** What’s the data-type of a pointer?

_The data-type of any pointer is always an_#a100ff ~unsigned long int~ i.e a pointer always stores
the address of another variable and the address is in hex form.

#+begin_src C
#include <stdio.h>
#include <stdlib.h>

int main(void) {
  char *ptr = NULL;

  printf("Size of ’unsigned long’: %lu", sizeof(unsigned long));
  printf("Size of ’ptr’: %lu\n\n", sizeof(ptr));

  return EXIT_SUCCESS;
}
#+end_src

Output

#+RESULTS:
: Size of ’unsigned long’: 8
: Size of ’ptr’: 8

#+begin_note
The ~sizeof~ operator always returns an ~unsigned long int~ value (address), so we
use ~%lu~ format specifier for the same.
#+end_note

** *Why do we specify data-type before the pointer’s name if it’s of ~unsigned long int~ type?*

To specify the data–type of the variable, whose address pointer is going to
store.

- Who does a pointer need to know about the data-type of the variable whose
  value it’s going to store?

* Thank You!
